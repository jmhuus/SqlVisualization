#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1120] =
    {   0,
        0,    0,  156,  156,    2,    2,  160,  158,    4,    4,
      158,  158,  147,  154,  147,  147,  151,  147,  147,  147,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  147,  156,  157,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  142,    0,    1,    0,
      149,  148,  151,  144,  143,  141,  145,  153,  153,  153,

      153,  153,  153,  120,  153,  121,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      122,  153,  153,  123,  124,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  125,  126,  127,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  128,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  146,  156,  155,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  152,    0,  148,  108,  153,  109,  153,  153,
      110,  153,  111,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  132,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  112,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  113,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      114,  153,  153,  115,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  116,  153,  153,  117,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  118,  153,  153,  153,  153,  153,  153,  153,  153,
      119,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  153,  153,  153,

      153,  153,  153,  153,   78,  153,   79,   41,   80,  153,
      153,  153,   81,  153,  153,   82,  153,  153,  153,  153,
       84,  153,  153,  153,   85,   86,  153,  153,  153,  153,
      153,  153,  153,   87,  153,  153,   88,   89,  153,  153,
       90,  153,   91,  131,  153,  153,  153,  153,  153,  153,
       92,  153,   93,   94,   95,  153,   97,  153,   98,  153,
      153,  153,  153,   99,  153,  153,  153,  153,  153,  100,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  101,
      153,  153,  153,  153,  102,  103,  104,  153,  135,  153,
      153,  153,  153,  153,  153,  153,  153,  105,  153,  106,

      153,  107,  134,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,   58,   59,  153,   60,  153,  138,  153,  153,  153,
      153,  153,  153,   61,  153,  153,  153,  153,   62,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  136,
       63,  153,  153,   64,  153,   96,  153,   65,   66,  153,
      153,  153,  153,   67,   68,   69,   70,  153,  133,  153,
      153,  153,   71,   72,  153,  153,  153,  153,  153,   73,
      153,  153,  153,  153,  153,  153,   74,  153,  153,  153,
      153,   75,  153,  153,  153,   76,  153,  153,  153,   77,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        0,  153,   31,  153,  153,   32,  140,  153,   33,  153,
      153,  153,   34,  153,   35,  153,   36,   37,   38,  153,
       39,  153,  153,   42,   43,   44,   45,   46,  153,  153,

       47,  130,  153,  153,   48,  153,  153,  153,   49,  153,
      153,   50,  129,   51,   52,  153,   53,  153,  153,  153,
      153,   54,   55,   56,   57,  153,  153,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,   15,   16,   17,   18,   19,
      153,  153,   20,  153,  153,   21,   22,   40,   23,  153,

       24,  153,  153,   25,   26,  153,  153,   27,   28,  153,
      153,  153,  153,   29,   30,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,   83,  153,   10,
       11,  153,   12,  153,   13,  139,  153,  153,  153,   14,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  153,    7,  153,    8,    9,
      153,    2,    2,    2,    2,    2,    2,    2,    0,    5,
        6,  153,    2,    2,    2,    2,    0,  137,    2,    2,

        0,    2,    0,    2,    0,    2,    0,    2,    0,    2,
        0,    2,    0,    2,    0,    2,  150,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1127] =
    {   0,
        0,    0,  709,  681,   76,    0,  668, 4466,  151,  153,
      643,    0, 4466, 4466,  149,  148,  160,  159,  625,  619,
      156,  156,  164,  162,  172,  223,  198,  211,  215,  151,
      168,  210,  255,  257,  263,  262,    0,  277,  307,  350,
      284,  221,  258,  171,  540,    0,  600,    0,  295,  308,
      561,  576,    0,    0,  331,  408,  419,  321,  542,  512,
      438,  514,  568,  620,  668,  720,  328,  426,  768,  329,
      311,  434,  500,  820,  868,  505,  421,  513,  918,  970,
      515,  570,  455,  423,  450,  351, 4466,  520, 4466,  512,
     1035, 1045, 1056, 4466, 4466, 4466, 4466,    0,  174,  282,

      336,  520,  296,  315,  557,    0,  345,  334,  568,  511,
      327,  611,  569,  345,  419,  421,  441,  444,  631,  469,
      515,  520,  552,  557,  562,  563,  574,  609,  578,  605,
        0,  618,  616,  665,  619,  628,  616,  637,  664,  685,
      631,  657,  667,  663,  669,  678,  690,  689,    0,  693,
      681,  685,  722,  722,  720,  726,  724,  729,  737,  727,
      725,  743,  749,  762,  772,  766,  767,  784,  779,  785,
      781,  785,  818,  787,  775,  798, 4466,    0, 4466,    0,
      389,    0,  512,    0,  499, 1066, 1076, 1087,    0,    0,
        0,    0,  806,  824,  855,  859,  913,  860,  878,  922,

      872,  961,  962, 1080,  957, 1081, 1133, 1084, 1083, 1085,
     1121, 1137, 1119, 1187,  952, 1145, 1149, 1170, 1189, 1181,
     1193, 1211, 1227, 1223, 1219, 1222, 1233, 1245, 1294, 1275,
     1285, 1277, 1290, 1307, 1347, 1306, 1339, 1349, 1362, 1364,
     1361, 1397, 1398, 1360, 1401, 1414, 1392, 1435, 1433, 1443,
     1447, 1465, 1451, 1468, 1403, 1487, 1501, 1489, 1503, 1505,
     1531, 1506, 1541, 1555, 1520, 1556, 1572, 1577, 1554, 1580,
     1598,    0, 4466,  498, 1645,    0,  822,    0,  829,  827,
        0,  839,    0,  828,  879,  872,  907, 1640,  907,  910,
      919,  929,  956,  982,  973, 1082,    0, 1079, 1097, 1323,

     1152, 1151, 1140, 1176, 1213, 1252,    0, 1259, 1261, 1275,
     1284, 1294, 1331, 1337, 1363, 1419, 1438, 1461, 1470, 1494,
     1492, 1539, 1539, 1578, 1583, 1608, 1605, 1616, 1626, 1639,
     1644, 1630, 1638,    0, 1633, 1649, 1646, 1652, 1656, 1654,
     1655, 1642, 1644, 1644,    0, 1654, 1649, 1649, 1664, 1668,
     1673, 1661, 1661, 1672, 1696, 1678, 1691, 1691, 1700, 1691,
     1702,    0, 1685, 1689, 1690, 1699, 1697, 1694, 1701, 1711,
        0, 1703, 1713, 1704, 1705, 1721, 1709, 1707, 1726, 1708,
     1719, 1739, 1743, 1734,    0,  495, 1779, 1756, 1757, 1758,
     1760, 1781, 1772, 1786, 1790, 1802, 1794, 1800, 1816, 1840,

     1831, 1826, 1848, 1857, 1832, 1866, 1874, 1834, 1870, 1885,
     1880, 1891, 1910, 1896, 1909, 1925, 1920, 1914, 1926, 1948,
     1939, 1962, 1950, 1974, 1963, 1965, 1978, 1984, 2014, 2015,
     1993, 2019, 2017, 2045, 2032, 2053, 2054, 2051, 2076, 2070,
     2082, 2085, 2104, 2091, 2099, 2110, 2125, 2116, 2144, 2150,
     2158, 2153, 2159, 2174, 2169, 2183, 2187, 2195, 2212, 2204,
     2193, 2208, 2223, 2227, 2233, 2241, 2262, 2257, 2266, 2283,
     2267, 2281, 2275, 2278, 2306, 2292, 2300, 2316, 2321, 2329,
     2337, 2311, 2335, 2345, 2360, 2378, 2375, 2374, 2391, 2383,
     2408, 2414, 2389, 2437, 2440, 2429,  491, 1784, 1915, 1922,

     1979, 1989, 2019, 2056,    0, 2092,    0,    0,    0, 2085,
     2102, 2126,    0, 2150, 2223, 2223, 2333, 2336, 2351, 2390,
     2407, 2426, 2435, 2437,    0,    0, 2434, 2437, 2436, 2438,
     2458, 2462, 2462,    0, 2448, 2469,    0,    0, 2472, 2463,
        0, 2469,    0,    0, 2482, 2470, 2467, 2475, 2478, 2491,
        0, 2487,    0,    0,    0, 2481,    0, 2490,    0, 2498,
     2485, 2499, 2490,    0, 2508, 2507, 2495, 2498, 2504,    0,
     2518, 2520, 2509, 2506, 2507, 2531, 2524, 2527, 2539,    0,
     2540, 2538, 2545, 2537,    0,    0, 2534, 2536,    0, 2553,
     2543, 2537, 2558, 2541, 2555, 2558, 2557,    0, 2545,    0,

     2562,    0,    0,  474, 2573, 2582, 2570, 2571, 2592, 2594,
     2596, 2604, 2615, 2606, 2607, 2625, 2628, 2640, 2637, 2646,
     2659, 2656, 2665, 2661, 2678, 2689, 2700, 2702, 2713, 2710,
     2719, 2724, 2728, 2732, 2734, 2758, 2762, 2767, 2768, 2756,
     2773, 2792, 2802, 2786, 2796, 2821, 2826, 2808, 2818, 2830,
     2831, 2832, 2847, 2842, 2863, 2871, 2880, 2872, 2895, 2881,
     2885, 2886, 2916, 2897, 2914, 2925, 2926, 2935, 2937, 2965,
     2939, 2970, 2954, 2980, 2983, 2971, 2988, 3013, 3025, 3011,
     3024, 3014, 3042, 3047, 3050, 3065, 3053, 3068, 3079, 3076,
     3081, 3078, 3084, 3093, 3102, 3117, 3121, 3127, 3135, 3156,

     3130, 3165, 3133, 3139, 3161, 3171, 3170, 3173, 3175, 3184,
      442,    0,    0, 2669,    0, 2691,    0, 2784, 2798, 2887,
     2945, 2965, 2989,    0, 2995, 3012, 3080, 3189,    0, 3192,
     3184, 3192, 3205, 3206, 3192, 3194, 3196, 3209, 3217,    0,
        0, 3204, 3214,    0, 3222,    0, 3210,    0,    0, 3212,
     3229, 3216, 3228,    0,    0,    0,    0, 3238,    0, 3243,
     3238, 3228,    0,    0, 3244, 3232, 3234, 3249, 3246,    0,
     3257, 3259, 3259, 3244, 3261, 3265, 3249, 3251, 3252, 3273,
     3277,    0, 3275, 3279, 3279,    0, 3267, 3287, 3288,    0,
      441, 3289, 3292, 3293, 3295, 3297, 3298, 3301, 3327, 3323,

     3331, 3352, 3329, 3337, 3361, 3367, 3375, 3363, 3366, 3396,
     3391, 3412, 3397, 3415, 3425, 3426, 3436, 3451, 3449, 3434,
     3437, 3460, 3479, 3465, 3488, 3489, 3503, 3494, 3500, 3504,
     3505, 3528, 3533, 3529, 3534, 3537, 3538, 3539, 3543, 3572,
     3571, 3562, 3573, 3583, 3587, 3602, 3608, 3596, 3613, 3605,
     3631, 3641, 3639, 3647, 3657, 3673, 3671, 3679, 3675, 3701,
     3707, 3705, 3709, 3711, 3713, 3715, 3739, 3745, 3747, 3744,
      435, 3303,    0, 3298, 3333, 3357,    0, 3373,    0, 3393,
     3405, 3416,    0, 3469,    0, 3472,    0,    0,    0, 3495,
        0, 3570, 3582,    0,    0,    0,    0,    0, 3613, 3636,

        0,    0, 3638, 3685,    0, 3672, 3723, 3726,    0, 3751,
     3753, 3741,    0,    0,    0, 3750,    0, 3765, 3767, 3771,
     3760,    0,    0,    0,    0, 3764, 3772,  434, 3781, 3783,
     3789, 3785, 3793, 3795, 3811, 3797, 3819, 3823, 3837, 3829,
     3862, 3833, 3863, 3847, 3851, 3865, 3873, 3875, 3887, 3891,
     3877, 3881, 3899, 3905, 3915, 3916, 3917, 3921, 3927, 3950,
     3949, 3931, 3940, 3939, 3953, 3961, 3985, 3991, 3979, 3975,
     3994, 4003, 4017, 4007, 4013, 4019, 4045, 4047, 4028, 4029,
     4053, 4057, 4058, 4061,  429,    0,    0,    0,    0,    0,
     3787, 3803,    0, 3841, 3888,    0,    0,    0,    0, 3967,

        0, 3958, 4004,    0,    0, 4010, 4053,    0,    0, 4050,
     4061, 4064, 4082,    0,    0,  404, 4083, 4087, 4091, 4093,
     4097, 4099, 4116, 4101, 4102, 4127, 4125, 4131, 4133, 4135,
     4159, 4141, 4170, 4165, 4167, 4171, 4181, 4189, 4173, 4199,
     4211, 4205, 4215, 4207, 4221, 4229,  402,    0, 4108,    0,
        0, 4122,    0, 4162,    0,    0, 4156, 4166, 4229,    0,
      401, 4239, 4250, 4244, 4247, 4263, 4253, 4269, 4261, 4275,
     4279, 4287, 4311, 4293,  397, 4245,    0, 4271,    0,    0,
     4291,  396, 4303, 4317, 4319, 4321, 4327, 4335,  383,    0,
        0, 4315,  382, 4329, 4332, 4361,  376,    0,  342, 4353,

      333,  331,  303,  291,  278,  255,  250,  245,  243,  240,
      235,  221,  226,  197,  187,  173, 4466,    0, 4466, 4435,
     4440,  181, 4445, 4450, 4455, 4460
    } ;

static const flex_int16_t yy_def[1127] =
    {   0,
     1119,    1, 1120, 1120, 1119,    5, 1119, 1119, 1119, 1119,
     1119, 1121, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1119, 1123, 1119, 1124, 1124, 1119,
     1124, 1125, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1126, 1126,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1124, 1119, 1119, 1121, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1119, 1123, 1119, 1124,
     1124, 1124, 1125, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
     1124, 1124,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1124, 1119, 1119, 1119, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1124, 1124, 1124,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1119, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1124,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1119, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1124,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1119, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1124,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1119, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,

     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1124,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1119, 1122, 1122, 1122,
     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
     1124,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1119, 1122, 1122, 1122, 1122, 1122,
     1122, 1124,   62,   62,   62,   62,   62,   62, 1119, 1122,
     1122, 1122, 1124,   62,   62,   62, 1119, 1122, 1124,   62,

     1119, 1124, 1119, 1124, 1119, 1124, 1119, 1124, 1119, 1124,
     1119, 1124, 1119, 1124, 1119, 1124, 1119, 1124,    0, 1119,
     1119, 1119, 1119, 1119, 1119, 1119
    } ;

static const flex_int16_t yy_nxt[4543] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  111,   98,  107,  136,  112,  101,
     1118,  102,  113,  108,  137,  103,  104,  176,  114,  276,

      109,  115,  106,  110, 1117,  116, 1116,  117,   99,  105,
      100,  111,  118,  107,  136,  112,  101,  119,  102,  113,
      108,  137,  103,  104,  176,  114,  276,  109,  115,  106,
      110,  126,  116,  128,  117, 1115,  138,  127, 1114,  118,
      139,  129,  131,  172,  119,  120,  140,  130,  132,  133,
      134,  173, 1113,  121, 1112,  135,  122, 1111,  126,  123,
      128, 1110,  124,  138,  127,  125, 1109,  139,  129,  131,
      172, 1108,  120,  140,  130,  132,  133,  134,  173,  144,
      121,  141,  135,  122,  152,  142,  123,  174,  175,  124,
      148,  143,  125,  145, 1107,  153,  181,   86,  149,  146,

      147,  154,  150,  155, 1106,  151,  144,  156,  141,   86,
       86,  152,  142,  157,  174,  175, 1105,  148,  143,  169,
      145,  170,  153,  277,  171,  149,  146,  147,  154,  150,
      155,  158,  151,  159,  156,  282,  160,  232,  184,  283,
      157,  189,  190,  161,  162, 1104,  169, 1103,  170,  185,
      277,  171,   86,   86,  193,  193,  289,  193,  158, 1102,
      159,  221,  282,  160,  232,  231,  283,  222,  296,  278,
      161,  162,  163,  297,  193,  193,  164,  279,  287,  165,
      166,  193,  193,  289,  193,  288,  167,  304,  221,  168,
      181,   86,  231, 1101,  222,  296,  278, 1099, 1097,  163,

      297,  193,  193,  164,  279,  287,  165,  166, 1093, 1089,
     1082, 1075,  288,  167,  304, 1061,  168,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  187,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  180,  180,
     1047,  180,  180,  180,  180,  180,  180,  193,  223,  271,
     1016,  985,  193,  928,  871,  305,  224,  180,  180,  180,
      233,  306,  225,  194,  234,  195,  307,  193,  308,  193,
      235,  196,  193,  197,  193,  223,  271,  198,  199,  193,
      193,  193,  305,  224,  269,  270,  791,  233,  306,  225,
      194,  234,  195,  307,  193,  308,  193,  235,  196,  193,

      197,  193,  314,  711,  198,  199,  604,  193,  193,  497,
      386,  269,  270,  180,  180,  180,  385,  180,  180,  180,
      180,  180,  180,  274,  273,  272,  236,  247,  193,  314,
      237,  193,  192,  180,  180,  180,  238,  294,  248,  250,
      200,  193,  280,  251,  249,  281,  193,  295,  315,  252,
      264,  193,  265,  236,  247,  266,  316,  237,  193,  193,
      201,  193,  191,  238,  294,  248,  250,  200,  193,  280,
      251,  249,  281,  193,  295,  315,  252,  264,  193,  265,
      180,  182,  266,  316,  284,  285,  193,  201,  193,  180,
      202,  317,  267,  318,  193,  319,  193,  203,  286,  320,

      268,  290,  291,  292,  204,  293,  179,  205,  302,  303,
      321,  284,  285,  324,  193,  177,  193,  202,  317,  267,
      318,  193,  319,  193,  203,  286,  320,  268,  290,  291,
      292,  204,  293,  298,  205,  302,  303,  321,  299,   97,
      324,  193,  206,  193,  300,   96,  207,  325,  326,  322,
      208,  301,  323,  327,  332,  309,  209,  310,  333,  210,
      298,  311,  334,   87,  335,  299,  193, 1119,  312,  206,
      341,  300,  313,  207,  325,  326,  322,  208,  301,  323,
      327,  332,  309,  209,  310,  333,  210,   47,  311,  334,
      328,  335,  342,  193,  193,  312,  336,  341,  337,  313,

      329,  211,  343,  212,  344,  330,  331,  338,  213,  339,
      345,  346,  347,  214,  193,   47,  348,  328,  349,  342,
      340,  193,  350,  336,  351,  337, 1119,  329,  211,  343,
      212,  344,  330,  331,  338,  213,  339,  345,  346,  347,
      214,  193,  215,  348,  352,  349,  193,  340,  353,  350,
      216,  351,  354,  217,  357,  355,  218,  358,  359,  219,
      356,  360,  220,  363,  364,  365,  193, 1119, 1119,  215,
      361,  352,  366,  193, 1119,  353, 1119,  216,  362,  354,
      217,  357,  355,  218,  358,  359,  219,  356,  360,  220,
      363,  364,  365,  193,  193,  226,  367,  361,  369,  366,

      370,  227,  228,  229,  371,  362,  372,  368,  230,  374,
      376,  377,  375,  382,  193, 1119,  383, 1119,  378, 1119,
      384,  193,  226,  367,  379,  369,  373,  370,  227,  228,
      229,  371,  193,  372,  368,  230,  374,  376,  377,  375,
      382,  193,  239,  383,  380,  378,  193,  384,  498,  388,
      193,  379,  193,  373, 1119,  499,  240,  381, 1119,  193,
      500,  501,  241,  242,  502, 1119,  193, 1119, 1119,  239,
      193,  380, 1119,  193, 1119,  498,  388,  193, 1119,  193,
     1119,  193,  499,  240,  381,  193,  193,  500,  501,  241,
      242,  502,  390,  193,  193,  243,  389,  193,  193,  394,

      391,  193,  395,  244,  193,  193,  193,  245,  193,  503,
      246, 1119,  193,  193,  193, 1119,  504, 1119,  193,  390,
     1119,  193,  243,  389,  193,  193,  394,  391,  193,  395,
      244,  193,  193,  193,  245,  392,  503,  246,  393,  193,
      505,  193,  253,  504,  254,  193,  509,  255,  193,  396,
      397,  193,  510,  511,  256,  257, 1119, 1119, 1119,  193,
     1119, 1119,  392,  398,  193,  393,  193,  505,  193,  253,
      512,  254, 1119,  509,  255,  193,  396,  397,  193,  510,
      511,  256,  257,  406,  401,  426,  193,  193,  193, 1119,
      398,  193,  258,  407,  399,  193,  259,  512,  193,  260,

      261,  400,  513,  193,  514,  193,  262,  193,  193,  263,
      406,  401,  426,  515,  193,  193,  193, 1119, 1119,  258,
      407,  399, 1119,  259, 1119,  193,  260,  261,  400,  513,
      193,  514, 1119,  262,  193,  193,  263, 1119, 1119, 1119,
      515, 1119, 1119,  193,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  387,  387,  387,  387,  387,
      387,  387,  387,  387,  387,  187,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  193,  193,  516,  193,
      193,  193,  517,  402,  403,  404, 1119,  405, 1119,  518,
     1119,  417,  408,  414,  415,  416,  193,  409, 1119,  193,
      193,  193, 1119,  193,  193,  516,  193,  193,  193,  517,
      402,  403,  404,  420,  405,  193,  518,  193,  417,  408,
      414,  415,  416,  193,  409,  410,  193,  193,  193,  193,
      411,  418,  419,  193, 1119,  193,  412,  193, 1119, 1119,
      420,  193,  193,  413,  193,  193,  521,  522,  427,  193,
     1119,  523,  410,  193, 1119,  428,  193,  411,  418,  419,
      193,  193,  193,  412,  193,  193,  193, 1119,  193,  524,

      413, 1119,  193,  521,  522,  427,  193,  193,  523,  429,
      193,  421,  428,  422,  431,  193,  193,  423,  193,  193,
     1119, 1119,  193,  193,  424,  430,  524,  193,  425,  432,
     1119, 1119, 1119,  193,  193,  193,  429,  193,  421,  193,
      422,  431,  193,  193,  423,  193,  193,  433,  193,  193,
      525,  424,  430,  193,  193,  425,  432,  193,  436,  193,
      193,  437,  193,  438,  193,  193,  193,  434,  193,  193,
      435,  193,  193,  193,  433,  193,  193,  525,  526,  193,
      193,  527,  439, 1119,  193,  436,  193,  528,  437, 1119,
      438,  193,  193, 1119,  434,  193,  193,  435,  193,  529,

      193,  193, 1119,  193, 1119,  526,  193, 1119,  527,  439,
      444,  193, 1119, 1119,  528,  445,  193,  447,  193,  440,
      193,  193, 1119,  446,  530, 1119,  529,  531,  193,  441,
      193,  193,  193,  193,  442,  443,  193,  444,  193,  448,
      193,  449,  445,  193,  447,  453,  440,  193,  193,  519,
      446,  530,  193,  193,  531, 1119,  441, 1119,  193,  193,
      193,  442,  443,  193,  520,  193,  448,  193,  449,  450,
      532,  451,  453,  193,  454,  193,  519,  533, 1119,  193,
      193, 1119,  452, 1119,  455,  193,  193,  193,  193,  534,
      193,  520,  193,  193,  458,  193,  450,  532,  451, 1119,

      193,  454,  193,  456,  533,  457,  193,  193,  193,  452,
      193,  455,  193,  193,  193,  193,  534,  193,  193,  459,
      193,  458,  193,  193,  193,  460,  461,  193, 1119,  193,
      456,  463,  457,  193,  193,  193, 1119,  193,  193,  475,
      193,  535, 1119,  193,  193,  193,  459,  193, 1119,  193,
      193,  193,  460,  461,  193,  462,  193,  464,  463,  465,
      193,  193, 1119,  466, 1119,  193,  475,  193,  535,  193,
      193,  193,  536,  193,  193,  469,  193,  193,  467,  193,
      471,  193,  462,  468,  464, 1119,  465,  193,  193,  193,
      466,  193,  472,  193,  193,  537,  193,  193,  470,  536,

      193,  473,  469,  538,  193,  467,  193,  471,  193,  474,
      468,  193,  478,  193,  193,  193,  193,  539,  193,  472,
      193,  193,  537,  477,  193,  470,  476,  193,  473,  193,
      538,  481,  193,  193,  540,  193,  474,  479,  193,  478,
      193,  193,  193,  483,  539,  488,  193,  193,  480,  193,
      477,  193,  193,  476,  193, 1119,  193,  193,  481,  193,
      193,  540,  193,  484,  479,  482,  193,  193,  541,  542,
      483, 1119,  488,  193,  193,  480,  193,  193,  193,  193,
      494,  193,  193,  485,  193,  486,  489,  193,  487, 1119,
      484, 1119,  482,  193,  193,  541,  542, 1119,  193, 1119,

      193,  193,  193,  492,  193,  490,  193,  494,  193,  193,
      485,  491,  486,  489,  193,  487,  493, 1119,  193,  543,
      496,  495,  544,  193,  193,  193,  193,  193,  193,  193,
      492, 1119,  490,  193, 1119, 1119, 1119, 1119,  491, 1119,
      545,  546,  547,  493,  193,  193,  543,  496,  495,  544,
      193,  193,  548,  193,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  506,  549,  507,  545,  546,  547,
      550,  193,  552,  553,  554,  555,  556,  557,  558,  548,
      551,  508,  559,  560,  561,  562,  563,  564,  565,  566,
      567,  506,  549,  507,  568,  569,  570,  550,  571,  552,

      553,  554,  555,  556,  557,  558,  572,  551,  508,  559,
      560,  561,  562,  563,  564,  565,  566,  567,  573,  574,
      575,  568,  569,  570,  576,  571,  577,  578,  579,  580,
      581,  582,  583,  572,  584,  585,  586,  587,  588,  589,
      591,  593,  592,  594,  595,  573,  574,  575,  590,  596,
      597,  576,  598,  577,  578,  579,  580,  581,  582,  583,
      599,  584,  585,  586,  587,  588,  589,  591,  593,  592,
      594,  595,  602,  603,  600,  590,  596,  597,  601,  598,
     1119, 1119,  193,  605,  193, 1119,  606,  599,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  193,  602,

      603,  600,  193,  193,  193,  601,  193,  193,  608,  193,
      605,  193,  193,  606,  607, 1119,  193, 1119,  193, 1119,
      193, 1119, 1119,  712,  610,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  608,  193, 1119,  609,  193,
      193,  607,  193,  193,  611,  193,  193,  193,  193,  612,
      712,  610,  193,  193,  193,  193, 1119,  193,  193,  193,
      623, 1119,  193,  193,  613,  609,  614,  193,  617,  193,
      616,  611,  193,  193,  193,  193,  612,  193,  620,  193,
      193,  615,  618,  193,  193,  193,  193,  623,  621,  193,
     1119,  613,  193,  614,  193,  617,  193,  616,  619,  193,

      193,  193,  625,  193,  193,  620,  193,  193,  615,  618,
      193,  193,  193,  193,  622,  621,  193,  626,  624,  193,
      193,  193,  629,  193, 1119,  619,  193,  193, 1119,  625,
      193,  193,  627,  193,  628,  193,  193,  193,  193,  193,
      633,  622,  193,  193,  626,  624,  193,  193,  631,  629,
      630,  193,  193,  193,  713,  193,  193,  632,  193,  627,
      193,  628,  193,  193,  193,  635,  193,  633,  714,  193,
      634,  193,  193,  193,  193,  631,  193,  630,  193,  193,
     1119,  713,  193,  193,  632,  193,  636,  193,  193,  193,
      637,  193,  635,  193,  193,  714,  193,  634,  193,  193,

      193,  193,  639,  193,  641,  640,  642,  638,  193,  193,
      193,  193,  193,  636, 1119,  193,  193,  637,  193,  193,
      193,  193, 1119,  193,  193,  715,  645,  193,  716,  639,
      193,  641,  640,  642,  638,  193,  193,  193,  193,  193,
      193,  193,  646,  193, 1119,  193,  193,  193,  643,  644,
     1119,  193,  715,  645,  717,  716, 1119,  193,  193,  647,
      193,  193,  649,  193, 1119,  193,  193,  193,  193,  646,
      193,  193,  193, 1119,  648,  643,  644,  193,  193,  193,
      193,  717,  718,  652, 1119,  193,  647,  193,  193,  649,
      193,  193,  193,  651,  650, 1119,  654,  193,  193,  193,

      193,  648,  193, 1119,  193,  193,  193,  193,  655,  718,
      652,  656,  653, 1119,  719, 1119,  193,  193,  193,  720,
      651,  650,  193,  654,  193,  193,  193,  193,  193,  193,
      657,  193,  721,  659,  660,  655,  193,  193,  656,  653,
      658,  719,  662,  193,  193,  193,  720, 1119, 1119,  193,
      193,  193,  193, 1119, 1119,  193,  193,  657,  193,  721,
      659,  660,  193,  193,  193,  722,  661,  658, 1119,  662,
      193,  193,  193, 1119,  663,  664,  193,  193,  193,  193,
      665,  666, 1119,  193,  193,  193, 1119,  667, 1119,  193,
      193,  723,  722,  661, 1119,  193,  193,  193,  193,  193,

      193,  663,  664,  193,  193,  193,  193,  665,  666,  193,
      669,  193,  193,  193,  667,  193,  668,  193,  723,  674,
      193,  193,  193,  193, 1119,  670,  193,  193,  671,  193,
      193,  193,  193,  193,  675, 1119,  193,  669,  193,  193,
      193,  193,  193,  668,  673,  676,  674,  193,  193,  193,
      193,  672,  670,  193,  193,  671,  193,  193,  193,  193,
      193,  675,  677,  724,  725,  193,  193,  193,  193,  193,
      678,  673,  676,  193, 1119,  679,  193,  193,  672,  193,
      193,  193, 1119,  193,  680,  193,  193,  193,  193,  677,
      724,  725,  193,  684,  193,  682,  193,  678,  681, 1119,

      193,  686,  679,  193,  193, 1119,  193,  193,  193,  193,
      193,  680,  193,  193,  193,  193,  683,  685,  193,  193,
      684,  193,  682, 1119,  193,  681,  193,  193,  686,  193,
      193,  193,  193,  688,  193,  193,  193,  694,  193,  193,
      193,  689,  193,  683,  685,  193,  193,  193,  193,  690,
      687,  193,  193,  193,  193,  193,  193,  193,  691,  193,
      688,  193,  193,  193,  694,  193,  726,  193,  689,  193,
      692,  193,  693,  193,  193,  193,  690,  687,  727,  193,
      695,  193,  193,  193,  193,  691,  696, 1119,  193,  193,
      193,  193,  728,  726,  193,  697,  701,  692,  193,  693,

      193,  193,  193, 1119,  193,  727,  193,  695,  193,  193,
      193,  700,  729,  696,  698,  193,  699,  193,  193,  728,
      193,  193,  697,  701,  193,  703,  702,  193,  193,  193,
      706,  193,  704,  193,  193,  193,  193,  193,  700,  729,
      193,  698,  193,  699,  193, 1119,  730,  193,  193, 1119,
      731,  193,  703,  702,  193,  193,  193,  706,  705,  704,
      193,  193,  193,  193,  193,  732,  193,  193,  710,  709,
      733,  734,  707,  730,  735,  193,  708,  731,  736,  737,
      738,  193,  193,  193,  739,  705,  193,  193,  740,  741,
      193,  742,  732,  193,  743,  710,  709,  733,  734,  707,

      744,  735,  193,  708,  745,  736,  737,  738,  746,  747,
      193,  739,  748,  193,  749,  740,  741,  750,  742,  751,
      753,  743,  754,  755,  756,  757,  758,  744,  759,  760,
      752,  745,  761,  762,  763,  746,  747,  764,  765,  748,
      766,  749,  767,  768,  750,  769,  751,  753,  770,  754,
      755,  756,  757,  758,  771,  759,  760,  752,  772,  761,
      762,  763,  773,  774,  764,  765,  775,  766,  776,  767,
      768,  777,  769,  778,  779,  770,  780,  781,  782,  783,
      784,  771,  785,  786,  787,  772,  788,  789,  790,  773,
      774, 1119, 1119,  775, 1119,  776,  193,  193,  777,  193,

      778,  779, 1119,  780,  781,  782,  783,  784,  193,  785,
      786,  787,  792,  788,  789,  790,  794,  795,  193,  193,
      193,  793,  798,  193,  193, 1119,  193, 1119,  193,  797,
      193,  796,  193,  193, 1119,  193, 1119,  799,  193,  792,
      193,  193,  193,  794,  795,  193,  193,  193,  793,  798,
      193,  193,  193,  193,  193,  193,  797,  193,  796,  193,
      193,  193,  800,  193,  799,  193,  193,  193,  193,  193,
      801,  193,  193, 1119,  193, 1119,  802,  193,  193,  193,
      193,  193,  193,  193, 1119,  193,  193,  193,  193,  800,
      193,  193,  193,  193,  806, 1119,  804,  801,  193,  193,

      803,  193,  193,  802,  193,  193,  805,  193, 1119,  193,
      193,  193,  193,  193,  193,  193,  872,  873,  193,  193,
      807,  806,  809,  804,  193, 1119,  193,  803,  193,  193,
      808,  193,  193,  805,  193,  193,  193,  811,  193,  193,
      812,  810,  193,  872,  873,  193,  193,  807,  193,  809,
      193,  193,  813,  193,  193,  193,  193,  808,  193,  193,
      193, 1119,  193,  193,  811,  193,  193,  812,  810,  814,
      193,  815,  193,  193,  193,  193, 1119,  193,  193,  813,
      193,  193,  820,  193,  193,  193,  193,  193,  193,  818,
      819, 1119,  193,  193,  193, 1119,  814,  193,  815,  193,

      816,  193,  193,  817,  193,  193, 1119,  193,  193,  820,
      874,  193,  193,  193,  193,  193,  818,  819,  193,  193,
      193,  193,  193,  875,  822, 1119,  193,  816,  193,  193,
      817,  193,  193,  821,  193,  193, 1119,  874,  193,  193,
      193,  193,  193,  823,  193,  193,  193,  193,  193,  193,
      875,  822,  193,  825,  193,  193,  193,  193,  826,  193,
      821,  193, 1119,  824,  193,  193, 1119,  193,  193,  193,
      823,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      825,  193, 1119,  193,  193,  826,  827,  828,  193,  193,
      824,  193, 1119,  193,  193,  193, 1119,  193,  193,  193,

      193, 1119,  829,  193,  193,  193,  193,  193,  831,  193,
      830,  193,  193,  827,  828,  193,  193,  193,  193,  832,
      193,  193,  876,  193,  193,  193,  193,  193,  833,  829,
     1119,  193,  193,  193,  193,  831,  193,  830,  193,  193,
      193,  193,  193,  193,  193,  193,  832,  835,  193,  876,
      193,  193,  836,  193,  193,  833, 1119,  834,  193,  193,
      193,  193,  193,  193, 1119,  193,  839,  193,  193,  193,
      193,  193,  193, 1119,  835,  837,  838, 1119,  193,  836,
      842,  193, 1119,  193,  834,  193,  877,  193,  193,  193,
      193,  193,  193,  839,  841, 1119,  193,  193,  193,  193,

      193,  878,  837,  838,  840,  845,  193,  842,  193,  193,
      193,  193,  193,  877,  193,  879,  193,  193,  193,  843,
     1119,  841,  844,  193,  193,  880,  193,  193,  878,  193,
     1119,  840,  845,  193,  193,  846,  193,  193,  193,  193,
      193,  193,  879,  193,  193,  848,  843,  847,  881,  844,
      193,  193,  880,  193, 1119,  850,  193,  193, 1119,  193,
      193,  193,  846,  849,  193,  851,  193,  193,  193, 1119,
      193,  193,  848,  193,  847,  881,  193,  193,  193,  193,
     1119,  852,  850, 1119,  193,  853,  193,  193,  193,  854,
      849,  193,  851,  193,  855,  193,  193,  193,  193,  193,

      193, 1119,  857,  193,  193,  193,  193,  193,  852,  856,
      193,  193,  853,  882,  193,  193,  854,  858,  193,  193,
      193,  855,  193,  193,  193,  193,  193,  193,  193,  857,
      193,  193,  193,  859,  193, 1119,  856,  193,  193,  193,
      882,  193,  860,  193,  858,  861,  193,  193,  193,  193,
     1119,  193,  193,  193,  193,  193,  193,  193, 1119,  867,
      859,  193,  862,  193, 1119,  193,  193,  193,  868,  860,
      193,  865,  861,  193,  193,  193,  193,  863,  864,  193,
      193,  193,  193,  193, 1119,  193,  867,  193,  193,  862,
      193,  193,  193,  866,  193,  868,  193,  193,  865,  870,

      193,  193,  193,  193,  863,  864,  193,  193,  193,  193,
      193,  193,  193,  869,  193,  883,  193,  193,  193,  193,
      866,  193,  884,  193,  193,  885,  870,  886,  193,  193,
      193,  887,  888,  889,  193,  890,  891,  193,  193,  892,
      869,  893,  883,  193,  193,  894,  193,  895,  193,  884,
      896,  897,  885,  898,  886,  899,  900,  193,  887,  888,
      889,  901,  890,  891,  902,  903,  892,  904,  893,  905,
      906,  907,  894,  908,  895,  909,  910,  896,  897,  911,
      898,  912,  899,  900,  913,  914,  915,  916,  901,  917,
      918,  902,  903,  919,  904,  920,  905,  906,  907,  921,

      908,  922,  909,  910,  923,  924,  911,  925,  912,  926,
      927,  913,  914,  915,  916,  193,  917,  918,  193,  193,
      919,  193,  920,  930,  193, 1119,  921,  931,  922,  986,
     1119,  923,  924,  987,  925,  193,  926,  927,  193,  193,
      929,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      930,  193,  932,  193,  931,  936,  986,  193,  933,  988,
      987, 1119,  193,  193, 1119,  193,  193,  929,  193,  193,
      193,  193,  934,  193,  193,  193,  193,  193,  193,  932,
      193, 1119,  936,  193,  193,  933,  988,  193,  935,  940,
      193,  937,  193,  193, 1119, 1119,  193,  989,  193,  934,

      193,  193,  193,  938,  193,  193,  990,  193,  939,  193,
      193, 1119,  193,  193,  193,  935,  940,  193,  937,  193,
      193,  193,  193,  944,  989,  193,  941,  991,  193,  992,
      938, 1119,  942,  990,  193,  939,  193,  193,  193,  193,
      193,  945,  193,  193,  193, 1119, 1119,  943,  193,  193,
      944,  193,  193,  941,  991, 1119,  992,  993,  193,  942,
      193,  193,  193,  193,  193,  193,  946,  947,  945,  193,
      193,  193,  193,  950,  943,  193,  948,  193,  193,  193,
      193,  949,  193,  193,  993,  193,  193,  193,  193,  193,
      193,  193,  994,  946,  947,  193,  995,  193,  193,  193,

      950,  951,  193,  948,  193,  193,  193,  193,  949,  193,
      193,  193,  952,  193,  193,  193,  953, 1119,  193,  994,
      193,  996,  193,  995,  193,  193,  193, 1119,  951,  193,
      193,  956,  193,  193,  193,  193, 1119, 1119,  193,  952,
      193,  193,  193,  953,  954,  955,  193,  193,  996,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  956,  193,
      193,  193,  193,  193,  193,  959,  958,  193,  957,  193,
     1119,  954,  955,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  959,  958,  960,  957,  193,  193,  193,  193,

      961,  193,  193,  962, 1119,  997,  193,  193,  193,  193,
      193,  193,  193,  963, 1119,  193,  193,  193,  193,  193,
     1119,  960,  966,  998,  193,  193,  193,  961,  193,  193,
      962,  193,  997,  193,  193,  193,  193, 1119, 1119,  193,
      963,  964,  193,  967,  193,  193,  193,  965,  193,  966,
      998,  193,  999,  968,  193,  193,  193,  193,  193,  193,
      193,  193, 1000,  969,  970,  193,  193,  193,  964,  193,
      967, 1001, 1119,  193,  965,  193, 1119,  193,  193,  999,
      968,  193,  972,  193,  193,  193,  193,  193,  971, 1000,
      969,  970,  193,  193,  193,  973, 1119,  193, 1001,  193,

      193,  193, 1119,  193,  193,  193, 1119, 1002, 1119,  972,
      193,  974,  193, 1003,  193,  971,  976,  193,  975,  193,
      193,  193,  973,  977,  193,  193,  193,  193,  193,  978,
      193,  193,  193,  193, 1002,  979,  980,  193,  974,  981,
     1003,  193, 1119,  976,  193,  975,  193,  193,  193, 1004,
      977,  193,  193,  193,  193,  193,  978,  193,  193,  193,
      193,  193,  979,  980,  193,  193,  981,  983,  193,  984,
      193,  193, 1005,  193,  193, 1006, 1004, 1007,  193,  982,
      193, 1008,  193, 1009,  193,  193,  193, 1010,  193, 1011,
      193,  193,  193,  193,  983, 1012,  984,  193,  193, 1005,

      193, 1013, 1006, 1014, 1007, 1015,  982, 1017, 1008,  193,
     1009, 1019,  193, 1048, 1010,  193, 1011,  193,  193,  193,
      193,  193, 1012,  193, 1018, 1049, 1119,  193, 1013,  193,
     1014,  193, 1015, 1020, 1017,  193,  193,  193, 1019,  193,
     1048,  193,  193,  193, 1021,  193,  193, 1023,  193,  193,
      193, 1018, 1049, 1022,  193,  193,  193,  193,  193,  193,
     1020, 1119,  193,  193,  193,  193,  193, 1050,  193,  193,
      193, 1021,  193,  193, 1023,  193,  193,  193, 1024,  193,
     1022, 1119,  193,  193,  193, 1025,  193, 1026,  193,  193,
      193,  193,  193,  193, 1050, 1119,  193,  193, 1119, 1027,

      193,  193,  193,  193,  193, 1024,  193,  193,  193,  193,
      193,  193, 1025,  193, 1026,  193,  193,  193,  193,  193,
      193,  193, 1028,  193,  193,  193, 1027,  193,  193, 1051,
      193,  193, 1029,  193,  193,  193,  193,  193,  193, 1119,
      193,  193,  193, 1031,  193,  193,  193,  193,  193, 1028,
      193,  193,  193,  193,  193, 1030, 1051,  193,  193, 1029,
      193,  193,  193,  193,  193, 1035,  193,  193,  193,  193,
     1031, 1033,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1034, 1030, 1032,  193,  193,  193,  193,  193,  193,
      193, 1052, 1035,  193,  193,  193,  193, 1053, 1033, 1036,

      193,  193,  193,  193,  193,  193,  193,  193, 1034, 1037,
     1032,  193,  193,  193,  193, 1038, 1119,  193, 1052, 1039,
      193,  193,  193,  193, 1053,  193, 1036, 1119,  193,  193,
     1054,  193,  193,  193,  193, 1041, 1037,  193,  193,  193,
      193, 1042, 1038,  193,  193,  193, 1039,  193,  193,  193,
     1040, 1055,  193,  193,  193,  193,  193, 1054,  193,  193,
      193, 1119, 1041,  193,  193,  193,  193,  193, 1042, 1043,
      193,  193,  193,  193,  193,  193,  193, 1040, 1055,  193,
      193,  193,  193,  193,  193, 1056,  193,  193, 1044, 1057,
      193,  193,  193,  193, 1046, 1058, 1043, 1045,  193,  193,

      193,  193,  193,  193,  193, 1059,  193,  193, 1060,  193,
      193,  193, 1056,  193,  193, 1044, 1057,  193,  193,  193,
      193, 1046, 1058,  193, 1045, 1062,  193,  193, 1064,  193,
      193,  193, 1059,  193,  193, 1060,  193,  193, 1063,  193,
      193, 1119,  193,  193,  193,  193,  193,  193,  193, 1076,
      193,  193, 1062,  193,  193, 1064,  193,  193, 1119,  193,
      193,  193,  193, 1077,  193, 1063,  193,  193, 1065,  193,
      193,  193,  193,  193,  193,  193, 1076,  193,  193,  193,
      193,  193, 1119, 1066,  193,  193,  193,  193,  193,  193,
     1077, 1068, 1119,  193,  193, 1065,  193,  193,  193,  193,

      193, 1078, 1079, 1080,  193,  193,  193,  193,  193, 1067,
     1066,  193,  193,  193,  193,  193,  193,  193, 1068,  193,
      193, 1070, 1069,  193,  193,  193,  193,  193, 1078, 1079,
     1080,  193,  193, 1074,  193,  193, 1067,  193,  193, 1072,
      193,  193,  193,  193,  193,  193,  193,  193, 1070, 1069,
     1071,  193,  193,  193,  193,  193, 1073,  193,  193, 1081,
     1074,  193,  193, 1119,  193,  193, 1072,  193,  193, 1119,
      193, 1090,  193,  193,  193,  193,  193, 1071,  193,  193,
      193, 1119,  193, 1073,  193,  193, 1081,  193,  193,  193,
      193, 1083,  193,  193,  193,  193,  193,  193, 1090,  193,

      193,  193,  193,  193, 1084,  193,  193,  193, 1085,  193,
     1119, 1091,  193,  193,  193,  193,  193,  193, 1083,  193,
      193,  193,  193,  193, 1087, 1086,  193, 1092,  193, 1094,
     1119, 1084,  193,  193,  193, 1085,  193,  193, 1091,  193,
      193, 1088,  193,  193, 1119,  193,  193,  193,  193,  193,
     1098, 1087, 1086,  193, 1092,  193, 1094,  193,  193, 1095,
      193,  193, 1119,  193,  193,  193,  193,  193, 1088, 1119,
      193, 1096,  193,  193,  193,  193,  193, 1098,  193,  193,
      193,  193,  193, 1119,  193,  193, 1095,  193,  193, 1119,
      193, 1119,  193, 1119,  193, 1119, 1100, 1119, 1096,  193,

      193, 1119,  193, 1119, 1119,  193,  193,  193,  193, 1119,
     1119, 1119, 1119, 1119,  193, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1100, 1119, 1119,  193, 1119, 1119, 1119,
     1119, 1119, 1119, 1119,  193,   46,   46,   46,   46,   46,
       88, 1119, 1119,   88,   88,  178,  178,  178, 1119,  178,
      180, 1119,  180,  180,  180,  183, 1119,  183,  183,  183,
      193, 1119,  193,  193,  193,    7, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,

     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119
    } ;

static const flex_int16_t yy_chk[4543] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   24, 1122,   23,   30,   24,   21,
     1116,   21,   24,   23,   31,   21,   21,   44,   24,   99,

       23,   24,   22,   23, 1115,   25, 1114,   25,   21,   22,
       21,   24,   25,   23,   30,   24,   21,   25,   21,   24,
       23,   31,   21,   21,   44,   24,   99,   23,   24,   22,
       23,   27,   25,   28,   25, 1113,   32,   27, 1112,   25,
       32,   28,   29,   42,   25,   26,   32,   28,   29,   29,
       29,   42, 1111,   26, 1110,   29,   26, 1109,   27,   26,
       28, 1108,   26,   32,   27,   26, 1107,   32,   28,   29,
       42, 1106,   26,   32,   28,   29,   29,   29,   42,   34,
       26,   33,   29,   26,   36,   33,   26,   43,   43,   26,
       35,   33,   26,   34, 1105,   36,   49,   49,   35,   34,

       34,   36,   35,   38, 1104,   35,   34,   38,   33,   50,
       50,   36,   33,   38,   43,   43, 1103,   35,   33,   41,
       34,   41,   36,  100,   41,   35,   34,   34,   36,   35,
       38,   39,   35,   39,   38,  103,   39,   71,   55,  104,
       38,   58,   58,   39,   39, 1102,   41, 1101,   41,   55,
      100,   41,   86,   86,   67,   70,  108,   71,   39, 1099,
       39,   67,  103,   39,   71,   70,  104,   67,  111,  101,
       39,   39,   40,  111,   67,   70,   40,  101,  107,   40,
       40,   67,   70,  108,   71,  107,   40,  114,   67,   40,
      181,  181,   70, 1097,   67,  111,  101, 1093, 1089,   40,

      111,   67,   70,   40,  101,  107,   40,   40, 1082, 1075,
     1061, 1047,  107,   40,  114, 1016,   40,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   61,   61,
      985,   61,   61,   61,   61,   61,   61,   77,   68,   84,
      928,  871,   68,  791,  711,  115,   68,   61,   61,   61,
       72,  116,   68,   61,   72,   61,  117,   77,  118,   84,
       72,   61,   68,   61,   77,   68,   84,   61,   61,   68,
       72,   83,  115,   68,   83,   83,  604,   72,  116,   68,
       61,   72,   61,  117,   77,  118,   84,   72,   61,   68,

       61,   83,  120,  497,   61,   61,  386,   72,   83,  274,
      185,   83,   83,   61,   62,   62,  183,   62,   62,   62,
       62,   62,   62,   90,   88,   85,   73,   76,   83,  120,
       73,   76,   60,   62,   62,   62,   73,  110,   76,   78,
       62,   81,  102,   78,   76,  102,   73,  110,  121,   78,
       81,   76,   81,   73,   76,   81,  122,   73,   76,   78,
       62,   81,   59,   73,  110,   76,   78,   62,   81,  102,
       78,   76,  102,   73,  110,  121,   78,   81,   76,   81,
       52,   51,   81,  122,  105,  105,   78,   62,   81,   62,
       63,  123,   82,  124,   63,  125,   82,   63,  105,  126,

       82,  109,  109,  109,   63,  109,   47,   63,  113,  113,
      127,  105,  105,  129,   63,   45,   82,   63,  123,   82,
      124,   63,  125,   82,   63,  105,  126,   82,  109,  109,
      109,   63,  109,  112,   63,  113,  113,  127,  112,   20,
      129,   63,   64,   82,  112,   19,   64,  130,  132,  128,
       64,  112,  128,  133,  135,  119,   64,  119,  136,   64,
      112,  119,  137,   11,  138,  112,   64,    7,  119,   64,
      141,  112,  119,   64,  130,  132,  128,   64,  112,  128,
      133,  135,  119,   64,  119,  136,   64,    4,  119,  137,
      134,  138,  142,   64,   65,  119,  139,  141,  139,  119,

      134,   65,  143,   65,  144,  134,  134,  140,   65,  140,
      145,  146,  147,   65,   65,    3,  148,  134,  150,  142,
      140,   65,  151,  139,  152,  139,    0,  134,   65,  143,
       65,  144,  134,  134,  140,   65,  140,  145,  146,  147,
       65,   65,   66,  148,  153,  150,   66,  140,  154,  151,
       66,  152,  154,   66,  156,  155,   66,  157,  158,   66,
      155,  159,   66,  160,  161,  162,   66,    0,    0,   66,
      159,  153,  163,   66,    0,  154,    0,   66,  159,  154,
       66,  156,  155,   66,  157,  158,   66,  155,  159,   66,
      160,  161,  162,   66,   69,   69,  164,  159,  165,  163,

      166,   69,   69,   69,  167,  159,  168,  164,   69,  169,
      170,  171,  169,  174,   69,    0,  175,    0,  172,    0,
      176,   69,   69,  164,  172,  165,  168,  166,   69,   69,
       69,  167,  193,  168,  164,   69,  169,  170,  171,  169,
      174,   69,   74,  175,  173,  172,   74,  176,  277,  194,
      194,  172,  193,  168,    0,  279,   74,  173,    0,  193,
      280,  282,   74,   74,  284,    0,   74,    0,    0,   74,
      194,  173,    0,   74,    0,  277,  194,  194,    0,  193,
        0,  195,  279,   74,  173,  196,  198,  280,  282,   74,
       74,  284,  196,   74,   75,   75,  195,  194,  201,  198,

      196,  195,  199,   75,  199,  196,  198,   75,  195,  285,
       75,    0,  196,  198,   75,    0,  286,    0,  201,  196,
        0,   75,   75,  195,  199,  201,  198,  196,  195,  199,
       75,  199,  196,  198,   75,  197,  285,   75,  197,  197,
      287,   75,   79,  286,   79,  201,  289,   79,  200,  200,
      200,  199,  290,  291,   79,   79,    0,    0,    0,  197,
        0,    0,  197,  200,   79,  197,  197,  287,  200,   79,
      292,   79,    0,  289,   79,  200,  200,  200,  215,  290,
      291,   79,   79,  205,  203,  215,  197,  202,  203,    0,
      200,   79,   80,  205,  202,  200,   80,  292,  215,   80,

       80,  202,  293,  205,  294,  215,   80,  202,  203,   80,
      205,  203,  215,  295,  202,  203,   80,    0,    0,   80,
      205,  202,    0,   80,    0,  215,   80,   80,  202,  293,
      205,  294,    0,   80,  202,  203,   80,    0,    0,    0,
      295,    0,    0,   80,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  187,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  204,  206,  296,  209,
      208,  210,  298,  204,  204,  204,    0,  204,    0,  299,
        0,  210,  206,  208,  208,  209,  204,  206,    0,  209,
      208,  210,    0,  204,  206,  296,  209,  208,  210,  298,
      204,  204,  204,  213,  204,  213,  299,  211,  210,  206,
      208,  208,  209,  204,  206,  207,  209,  208,  210,  207,
      207,  211,  212,  212,    0,  213,  207,  211,    0,    0,
      213,  216,  213,  207,  211,  217,  301,  302,  216,  207,
        0,  303,  207,  212,    0,  217,  207,  207,  211,  212,
      212,  216,  213,  207,  211,  217,  218,    0,  216,  304,

      207,    0,  217,  301,  302,  216,  207,  220,  303,  218,
      212,  214,  217,  214,  220,  219,  218,  214,  216,  221,
        0,    0,  217,  218,  214,  219,  304,  220,  214,  221,
        0,    0,    0,  214,  220,  219,  218,  222,  214,  221,
      214,  220,  219,  218,  214,  225,  221,  222,  226,  224,
      305,  214,  219,  223,  220,  214,  221,  222,  224,  227,
      214,  225,  219,  227,  222,  225,  221,  223,  226,  224,
      223,  228,  225,  223,  222,  226,  224,  305,  306,  227,
      223,  308,  228,    0,  222,  224,  227,  309,  225,    0,
      227,  228,  225,    0,  223,  226,  224,  223,  228,  310,

      223,  230,    0,  232,    0,  306,  227,    0,  308,  228,
      230,  231,    0,    0,  309,  231,  233,  233,  228,  229,
      229,  230,    0,  232,  311,    0,  310,  312,  230,  229,
      232,  231,  236,  234,  229,  229,  233,  230,  231,  234,
      229,  234,  231,  233,  233,  236,  229,  229,  230,  300,
      232,  311,  236,  234,  312,    0,  229,    0,  231,  236,
      234,  229,  229,  233,  300,  237,  234,  229,  234,  235,
      313,  235,  236,  235,  237,  238,  300,  314,    0,  236,
      234,    0,  235,    0,  238,  237,  244,  241,  239,  315,
      240,  300,  237,  235,  241,  238,  235,  313,  235,    0,

      235,  237,  238,  239,  314,  240,  244,  241,  239,  235,
      240,  238,  237,  244,  241,  239,  315,  240,  247,  242,
      235,  241,  238,  242,  243,  243,  245,  245,    0,  255,
      239,  247,  240,  244,  241,  239,    0,  240,  247,  255,
      246,  316,    0,  242,  243,  247,  242,  245,    0,  255,
      242,  243,  243,  245,  245,  246,  255,  248,  247,  249,
      246,  248,    0,  249,    0,  247,  255,  246,  316,  250,
      242,  243,  317,  251,  245,  251,  255,  253,  250,  249,
      253,  248,  246,  250,  248,    0,  249,  246,  248,  250,
      249,  252,  254,  251,  254,  318,  250,  253,  252,  317,

      251,  254,  251,  319,  253,  250,  249,  253,  248,  254,
      250,  252,  258,  256,  254,  258,  250,  320,  252,  254,
      251,  254,  318,  257,  253,  252,  256,  257,  254,  259,
      319,  260,  262,  256,  321,  258,  254,  259,  252,  258,
      256,  254,  258,  262,  320,  265,  265,  257,  259,  259,
      257,  260,  262,  256,  257,    0,  259,  261,  260,  262,
      256,  321,  258,  263,  259,  261,  265,  263,  322,  323,
      262,    0,  265,  265,  257,  259,  259,  261,  260,  262,
      269,  264,  266,  263,  261,  264,  266,  263,  264,    0,
      263,    0,  261,  265,  263,  322,  323,    0,  267,    0,

      269,  264,  266,  268,  261,  267,  270,  269,  264,  266,
      263,  267,  264,  266,  263,  264,  268,    0,  267,  324,
      271,  270,  325,  268,  271,  267,  270,  269,  264,  266,
      268,    0,  267,  270,    0,    0,    0,    0,  267,    0,
      326,  327,  328,  268,  271,  267,  324,  271,  270,  325,
      268,  271,  329,  270,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  288,  330,  288,  326,  327,  328,
      331,  271,  332,  333,  335,  336,  337,  338,  339,  329,
      331,  288,  340,  341,  342,  343,  344,  346,  347,  348,
      349,  288,  330,  288,  350,  351,  352,  331,  353,  332,

      333,  335,  336,  337,  338,  339,  354,  331,  288,  340,
      341,  342,  343,  344,  346,  347,  348,  349,  355,  356,
      357,  350,  351,  352,  358,  353,  359,  360,  361,  363,
      364,  365,  366,  354,  367,  368,  369,  370,  372,  373,
      374,  375,  374,  376,  377,  355,  356,  357,  373,  378,
      379,  358,  380,  359,  360,  361,  363,  364,  365,  366,
      381,  367,  368,  369,  370,  372,  373,  374,  375,  374,
      376,  377,  383,  384,  382,  373,  378,  379,  382,  380,
        0,    0,  388,  389,  390,    0,  391,  381,  387,  387,
      387,  387,  387,  387,  387,  387,  387,  387,  393,  383,

      384,  382,  388,  389,  390,  382,  391,  392,  394,  388,
      389,  390,  394,  391,  392,    0,  395,    0,  393,    0,
      397,    0,    0,  498,  397,  393,  398,  392,  396,  388,
      389,  390,  394,  391,  392,  394,  395,    0,  396,  394,
      397,  392,  399,  395,  398,  393,  398,  397,  396,  399,
      498,  397,  402,  398,  392,  396,    0,  401,  405,  394,
      408,    0,  399,  395,  400,  396,  400,  397,  402,  399,
      401,  398,  402,  398,  403,  396,  399,  401,  405,  402,
      408,  400,  403,  404,  401,  405,  400,  408,  406,  399,
        0,  400,  406,  400,  403,  402,  409,  401,  404,  402,

      407,  403,  411,  404,  401,  405,  411,  408,  400,  403,
      404,  410,  406,  400,  407,  406,  409,  412,  410,  406,
      407,  403,  414,  409,    0,  404,  411,  407,    0,  411,
      404,  410,  412,  411,  413,  415,  413,  412,  410,  406,
      418,  407,  414,  409,  412,  410,  417,  407,  416,  414,
      415,  416,  419,  411,  499,  415,  413,  417,  410,  412,
      418,  413,  415,  413,  412,  421,  417,  418,  500,  414,
      420,  416,  419,  417,  420,  416,  423,  415,  416,  419,
        0,  499,  415,  413,  417,  421,  422,  418,  422,  425,
      423,  426,  421,  417,  420,  500,  423,  420,  416,  419,

      424,  420,  425,  423,  427,  426,  428,  424,  422,  425,
      428,  426,  421,  422,    0,  422,  425,  423,  426,  431,
      424,  420,    0,  423,  427,  501,  431,  424,  502,  425,
      428,  427,  426,  428,  424,  422,  425,  428,  426,  431,
      429,  430,  432,  433,    0,  432,  431,  424,  429,  430,
        0,  427,  501,  431,  503,  502,    0,  428,  435,  433,
      429,  430,  435,  433,    0,  432,  431,  429,  430,  432,
      433,  434,  432,    0,  434,  429,  430,  438,  435,  436,
      437,  503,  504,  438,    0,  435,  433,  429,  430,  435,
      433,  434,  432,  437,  436,    0,  440,  438,  434,  436,

      437,  434,  439,    0,  438,  435,  436,  437,  441,  504,
      438,  442,  439,    0,  506,    0,  440,  444,  434,  510,
      437,  436,  439,  440,  438,  445,  436,  437,  441,  439,
      443,  442,  511,  444,  445,  441,  446,  444,  442,  439,
      443,  506,  448,  440,  444,  445,  510,    0,    0,  439,
      443,  447,  445,    0,    0,  441,  446,  443,  442,  511,
      444,  445,  448,  446,  444,  512,  447,  443,    0,  448,
      449,  447,  445,    0,  449,  450,  450,  443,  447,  452,
      451,  452,    0,  446,  451,  453,    0,  453,    0,  448,
      449,  514,  512,  447,    0,  455,  450,  449,  447,  452,

      454,  449,  450,  450,  451,  453,  452,  451,  452,  456,
      455,  451,  453,  457,  453,  455,  454,  449,  514,  461,
      454,  458,  455,  450,    0,  456,  452,  454,  458,  456,
      460,  451,  453,  457,  462,    0,  456,  455,  459,  461,
      457,  458,  455,  454,  460,  463,  461,  454,  458,  463,
      460,  459,  456,  464,  462,  458,  456,  460,  459,  465,
      457,  462,  464,  515,  516,  459,  461,  466,  458,  463,
      465,  460,  463,  464,    0,  466,  463,  460,  459,  465,
      464,  462,    0,  468,  467,  459,  465,  466,  467,  464,
      515,  516,  469,  471,  466,  469,  463,  465,  468,    0,

      464,  473,  466,  468,  474,    0,  465,  472,  467,  470,
      468,  467,  469,  471,  466,  467,  470,  472,  476,  469,
      471,  473,  469,    0,  474,  468,  477,  472,  473,  470,
      468,  474,  475,  476,  472,  467,  470,  482,  476,  469,
      471,  477,  478,  470,  472,  476,  477,  479,  473,  478,
      475,  474,  475,  477,  472,  480,  470,  482,  479,  475,
      476,  483,  478,  481,  482,  476,  517,  479,  477,  478,
      480,  484,  481,  477,  479,  480,  478,  475,  518,  475,
      484,  483,  480,  481,  482,  479,  485,    0,  483,  478,
      481,  484,  519,  517,  479,  485,  488,  480,  484,  481,

      488,  487,  480,    0,  486,  518,  485,  484,  483,  490,
      481,  487,  520,  485,  486,  493,  486,  489,  484,  519,
      488,  487,  485,  488,  486,  490,  489,  488,  487,  490,
      493,  486,  491,  485,  491,  493,  490,  489,  487,  520,
      492,  486,  493,  486,  489,    0,  521,  488,  487,    0,
      522,  486,  490,  489,  491,  496,  490,  493,  492,  491,
      492,  491,  493,  494,  489,  523,  495,  492,  496,  495,
      524,  527,  494,  521,  528,  496,  494,  522,  529,  530,
      531,  491,  496,  494,  532,  492,  495,  492,  533,  535,
      494,  536,  523,  495,  539,  496,  495,  524,  527,  494,

      540,  528,  496,  494,  542,  529,  530,  531,  545,  546,
      494,  532,  547,  495,  548,  533,  535,  549,  536,  550,
      552,  539,  556,  558,  560,  561,  561,  540,  562,  563,
      550,  542,  565,  566,  567,  545,  546,  568,  569,  547,
      571,  548,  572,  573,  549,  574,  550,  552,  575,  556,
      558,  560,  561,  561,  576,  562,  563,  550,  577,  565,
      566,  567,  578,  579,  568,  569,  581,  571,  582,  572,
      573,  583,  574,  584,  587,  575,  588,  590,  591,  592,
      593,  576,  594,  595,  596,  577,  597,  599,  601,  578,
      579,    0,    0,  581,    0,  582,  607,  608,  583,  605,

      584,  587,    0,  588,  590,  591,  592,  593,  606,  594,
      595,  596,  605,  597,  599,  601,  607,  608,  609,  605,
      610,  606,  611,  607,  608,    0,  605,    0,  606,  610,
      612,  609,  614,  615,    0,  606,    0,  613,  609,  605,
      610,  613,  611,  607,  608,  609,  605,  610,  606,  611,
      612,  616,  614,  615,  617,  606,  610,  612,  609,  614,
      615,  613,  617,  619,  613,  609,  618,  610,  613,  611,
      618,  616,  620,    0,  617,    0,  619,  612,  616,  614,
      615,  617,  622,  619,    0,  621,  618,  624,  613,  617,
      619,  623,  620,  618,  624,    0,  622,  618,  616,  620,

      621,  617,  622,  619,  625,  621,  623,  624,    0,  622,
      619,  623,  621,  618,  624,  626,  714,  716,  623,  620,
      625,  624,  627,  622,  625,    0,  627,  621,  628,  622,
      626,  625,  621,  623,  624,  626,  630,  629,  623,  629,
      630,  628,  626,  714,  716,  631,  627,  625,  628,  627,
      632,  625,  631,  627,  633,  628,  630,  626,  634,  629,
      635,    0,  626,  630,  629,  631,  629,  630,  628,  634,
      632,  635,  631,  627,  633,  628,    0,  632,  634,  631,
      635,  633,  640,  630,  636,  634,  629,  635,  637,  638,
      639,    0,  631,  638,  639,    0,  634,  632,  635,  641,

      636,  633,  640,  637,  636,  634,    0,  635,  637,  640,
      718,  636,  644,  638,  639,  637,  638,  639,  642,  641,
      638,  639,  645,  719,  643,    0,  641,  636,  643,  640,
      637,  636,  644,  642,  648,  637,    0,  718,  642,  644,
      638,  639,  645,  646,  649,  642,  641,  646,  643,  645,
      719,  643,  647,  649,  648,  643,  650,  651,  652,  644,
      642,  648,    0,  647,  649,  642,    0,  646,  654,  645,
      646,  649,  647,  653,  646,  643,  650,  651,  652,  647,
      649,  648,    0,  650,  651,  652,  653,  654,  654,  655,
      647,  649,    0,  653,  646,  654,    0,  656,  658,  647,

      653,    0,  655,  650,  651,  652,  657,  660,  657,  655,
      656,  661,  662,  653,  654,  654,  655,  656,  658,  657,
      653,  659,  720,  664,  656,  658,  657,  660,  659,  655,
        0,  661,  662,  657,  660,  657,  655,  656,  661,  662,
      665,  659,  663,  664,  656,  658,  657,  665,  659,  720,
      664,  666,  667,  657,  660,  659,    0,  663,  661,  662,
      665,  668,  663,  669,    0,  671,  669,  665,  659,  663,
      664,  666,  667,    0,  665,  668,  668,    0,  666,  667,
      673,  668,    0,  669,  663,  671,  721,  665,  668,  663,
      669,  670,  671,  669,  672,    0,  672,  676,  666,  667,

      673,  722,  668,  668,  670,  676,  674,  673,  668,  675,
      669,  670,  671,  721,  677,  723,  672,  676,  670,  674,
        0,  672,  675,  672,  676,  725,  674,  673,  722,  675,
        0,  670,  676,  674,  677,  678,  675,  680,  670,  678,
      682,  677,  723,  672,  676,  680,  674,  679,  726,  675,
      681,  679,  725,  674,    0,  682,  675,  680,    0,  678,
      682,  677,  678,  681,  680,  683,  678,  682,  683,    0,
      681,  679,  680,  684,  679,  726,  685,  681,  679,  687,
        0,  684,  682,    0,  680,  685,  678,  682,  683,  686,
      681,  686,  683,  684,  688,  683,  685,  681,  679,  687,

      684,    0,  690,  685,  692,  689,  687,  691,  684,  689,
      693,  686,  685,  727,  688,  683,  686,  691,  686,  694,
      684,  688,  690,  685,  692,  689,  687,  691,  695,  690,
      693,  692,  689,  694,  691,    0,  689,  693,  686,  694,
      727,  688,  695,  696,  691,  697,  694,  697,  695,  690,
        0,  692,  689,  698,  691,  695,  701,  693,    0,  703,
      694,  699,  698,  696,    0,  704,  694,  697,  704,  695,
      696,  701,  697,  698,  697,  695,  701,  699,  700,  703,
      698,  699,  700,  701,    0,  704,  703,  705,  699,  698,
      696,  702,  704,  702,  697,  704,  707,  706,  701,  708,

      698,  709,  700,  701,  699,  700,  703,  705,  699,  700,
      710,  702,  704,  706,  705,  728,  707,  706,  702,  708,
      702,  709,  730,  707,  706,  731,  708,  732,  709,  700,
      710,  733,  734,  735,  705,  736,  737,  710,  702,  738,
      706,  739,  728,  707,  706,  742,  708,  743,  709,  730,
      745,  747,  731,  750,  732,  751,  752,  710,  733,  734,
      735,  753,  736,  737,  758,  760,  738,  761,  739,  762,
      765,  766,  742,  767,  743,  768,  769,  745,  747,  771,
      750,  772,  751,  752,  773,  774,  775,  776,  753,  777,
      778,  758,  760,  779,  761,  780,  762,  765,  766,  781,

      767,  783,  768,  769,  784,  785,  771,  787,  772,  788,
      789,  773,  774,  775,  776,  792,  777,  778,  793,  794,
      779,  795,  780,  796,  797,    0,  781,  798,  783,  872,
        0,  784,  785,  874,  787,  792,  788,  789,  793,  794,
      794,  795,  792,  796,  797,  793,  794,  798,  795,  800,
      796,  797,  799,  799,  798,  803,  872,  801,  800,  875,
      874,    0,  792,  804,    0,  793,  794,  794,  795,  800,
      796,  797,  801,  799,  798,  803,  800,  801,  802,  799,
      799,    0,  803,  804,  801,  800,  875,  805,  802,  808,
      804,  805,  809,  806,    0,    0,  800,  876,  802,  801,

      799,  807,  803,  806,  801,  802,  878,  805,  807,  808,
      804,    0,  809,  806,  805,  802,  808,  811,  805,  809,
      806,  807,  810,  813,  876,  802,  810,  880,  807,  881,
      806,    0,  811,  878,  805,  807,  808,  811,  812,  809,
      806,  814,  810,  813,  811,    0,    0,  812,  807,  810,
      813,  815,  816,  810,  880,    0,  881,  882,  812,  811,
      820,  814,  817,  821,  811,  812,  815,  816,  814,  810,
      813,  815,  816,  819,  812,  819,  817,  818,  815,  816,
      820,  818,  817,  821,  882,  812,  822,  820,  814,  817,
      821,  824,  884,  815,  816,  819,  886,  818,  815,  816,

      819,  822,  819,  817,  818,  823,  822,  820,  818,  817,
      821,  824,  823,  822,  825,  826,  825,    0,  824,  884,
      828,  890,  819,  886,  818,  823,  829,    0,  822,  827,
      830,  831,  823,  822,  825,  826,    0,    0,  824,  823,
      828,  825,  826,  825,  827,  830,  829,  828,  890,  827,
      830,  831,  823,  829,  832,  834,  827,  830,  831,  833,
      835,  825,  826,  836,  837,  838,  833,  828,  832,  839,
        0,  827,  830,  829,  832,  834,  827,  830,  831,  833,
      835,  832,  834,  836,  837,  838,  833,  835,  842,  839,
      836,  837,  838,  833,  840,  832,  839,  841,  840,  843,

      841,  832,  834,  842,    0,  892,  833,  835,  842,  844,
      836,  837,  838,  845,    0,  842,  839,  841,  840,  843,
        0,  840,  848,  893,  841,  840,  843,  841,  846,  844,
      842,  850,  892,  845,  847,  842,  844,    0,    0,  849,
      845,  846,  848,  849,  841,  840,  843,  847,  846,  848,
      893,  850,  899,  851,  847,  846,  844,  851,  850,  849,
      845,  847,  900,  852,  853,  853,  849,  852,  846,  848,
      849,  903,    0,  854,  847,  846,    0,  851,  850,  899,
      851,  847,  855,  855,  851,  853,  849,  852,  854,  900,
      852,  853,  853,  854,  852,  856,    0,  857,  903,  856,

      854,  859,    0,  855,  851,  858,    0,  904,    0,  855,
      855,  857,  853,  906,  852,  854,  859,  857,  858,  856,
      854,  859,  856,  860,  857,  858,  856,  860,  859,  861,
      855,  862,  858,  861,  904,  863,  864,  864,  857,  865,
      906,  866,    0,  859,  857,  858,  856,  860,  859,  907,
      860,  862,  858,  861,  860,  863,  861,  864,  862,  865,
      861,  866,  863,  864,  864,  867,  865,  868,  866,  869,
      870,  868,  908,  869,  860,  910,  907,  911,  862,  867,
      861,  912,  863,  916,  864,  867,  865,  918,  866,  919,
      870,  868,  867,  869,  868,  920,  869,  870,  868,  908,

      869,  921,  910,  926,  911,  927,  867,  929,  912,  930,
      916,  932,  867,  991,  918,  931,  919,  870,  868,  933,
      869,  934,  920,  936,  931,  992,    0,  929,  921,  930,
      926,  932,  927,  933,  929,  931,  930,  935,  932,  933,
      991,  934,  931,  936,  935,  937,  933,  938,  934,  938,
      936,  931,  992,  937,  929,  940,  930,  935,  932,  942,
      933,    0,  931,  939,  935,  937,  933,  994,  934,  938,
      936,  935,  937,  944,  938,  940,  938,  945,  939,  942,
      937,    0,  940,  939,  935,  941,  942,  943,  941,  943,
      939,  946,  937,  944,  994,    0,  938,  945,    0,  947,

      944,  948,  940,  951,  945,  939,  942,  952,  941,  943,
      939,  946,  941,  949,  943,  941,  943,  950,  946,  947,
      944,  948,  949,  951,  945,  953,  947,  952,  948,  995,
      951,  954,  950,  949,  952,  941,  943,  950,  946,    0,
      949,  955,  956,  957,  950,  953,  947,  958,  948,  949,
      951,  954,  953,  959,  952,  956,  995,  962,  954,  950,
      949,  955,  956,  957,  950,  964,  963,  958,  955,  956,
      957,  961,  953,  959,  958,  961,  960,  962,  954,  965,
      959,  963,  956,  960,  962,  964,  963,  966,  955,  956,
      957, 1000,  964,  963,  958,  961,  960, 1002,  961,  965,

      959,  970,  961,  960,  962,  969,  965,  966,  963,  967,
      960,  967,  964,  963,  966,  968,    0,  968, 1000,  969,
      971,  970,  961,  960, 1002,  969,  965,    0,  970,  972,
     1003,  967,  969,  974,  966,  975,  967,  968,  967,  975,
      971,  976,  968,  973,  968,  976,  969,  971,  970,  972,
      973, 1006,  969,  974,  979,  980,  972, 1003,  967,  975,
      974,    0,  975,  973,  968,  976,  975,  971,  976,  977,
      973,  977,  976,  978,  979,  980,  972,  973, 1006,  981,
      974,  979,  980,  982,  983, 1007,  975,  984,  978, 1010,
      973,  977,  976,  978,  984, 1011,  977,  983,  977,  981,

      978,  979,  980,  982,  983, 1012,  981,  984, 1013, 1017,
      982,  983, 1007, 1018,  984,  978, 1010, 1019,  977, 1020,
      978,  984, 1011, 1021,  983, 1022,  981, 1024, 1025, 1017,
      982,  983, 1012, 1018,  984, 1013, 1017, 1019, 1023, 1020,
     1018,    0, 1023, 1021, 1019, 1022, 1020, 1024, 1025, 1049,
     1021, 1027, 1022, 1026, 1024, 1025, 1017, 1028,    0, 1029,
     1018, 1030, 1023, 1052, 1019, 1023, 1020, 1032, 1026, 1023,
     1021, 1027, 1022, 1026, 1024, 1025, 1049, 1028, 1027, 1029,
     1026, 1030,    0, 1031, 1028, 1031, 1029, 1032, 1030, 1023,
     1052, 1034,    0, 1035, 1032, 1026, 1033, 1036, 1027, 1039,

     1026, 1054, 1057, 1058, 1028, 1031, 1029, 1037, 1030, 1033,
     1031, 1034, 1031, 1035, 1032, 1038, 1033, 1036, 1034, 1039,
     1035, 1038, 1037, 1033, 1036, 1040, 1039, 1037, 1054, 1057,
     1058, 1042, 1031, 1044, 1037, 1038, 1033, 1041, 1034, 1042,
     1035, 1043, 1038, 1033, 1036, 1040, 1039, 1045, 1038, 1037,
     1041, 1042, 1040, 1044, 1037, 1046, 1043, 1041, 1042, 1059,
     1044, 1043, 1038,    0, 1041, 1062, 1042, 1045, 1043,    0,
     1064, 1076, 1040, 1065, 1045, 1046, 1063, 1041, 1042, 1067,
     1044,    0, 1046, 1043, 1041, 1062, 1059, 1069, 1043, 1066,
     1064, 1063, 1062, 1065, 1045, 1068, 1063, 1064, 1076, 1067,

     1065, 1070, 1046, 1063, 1066, 1071, 1067, 1069, 1068, 1066,
        0, 1078, 1062, 1072, 1069, 1068, 1066, 1064, 1063, 1074,
     1065, 1070, 1068, 1063, 1072, 1071, 1067, 1081, 1070, 1083,
        0, 1066, 1071, 1072, 1069, 1068, 1066, 1073, 1078, 1074,
     1072, 1073, 1068, 1084,    0, 1085, 1074, 1086, 1070, 1083,
     1092, 1072, 1071, 1087, 1081, 1094, 1083, 1073, 1095, 1085,
     1072, 1088,    0, 1084, 1073, 1085, 1074, 1086, 1073,    0,
     1084, 1088, 1085, 1087, 1086, 1094, 1083, 1092, 1095, 1100,
     1087, 1088, 1094,    0, 1073, 1095, 1085, 1096, 1088,    0,
     1084,    0, 1085,    0, 1086,    0, 1096,    0, 1088, 1100,

     1087,    0, 1094,    0,    0, 1095, 1100, 1096, 1088,    0,
        0,    0,    0,    0, 1096,    0,    0,    0,    0,    0,
        0,    0,    0, 1096,    0,    0, 1100,    0,    0,    0,
        0,    0,    0,    0, 1096, 1120, 1120, 1120, 1120, 1120,
     1121,    0,    0, 1121, 1121, 1123, 1123, 1123,    0, 1123,
     1124,    0, 1124, 1124, 1124, 1125,    0, 1125, 1125, 1125,
     1126,    0, 1126, 1126, 1126, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,

     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2049 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2063 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 2350 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1120 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1119 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 141:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 148:
#line 213 "flex_lexer.l"
case 149:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
/* 
	 * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no 
	 * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
	 *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
	 */
case 150:
YY_RULE_SETUP
#line 223 "flex_lexer.l"
{
	yylval->ival = LLONG_MIN;
	return SQL_INTVAL;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{
	errno = 0;
	yylval->ival = strtoll(yytext, nullptr, 0);
	if (errno) {
		return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
		return 0;
	}
	return SQL_INTVAL;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 238 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 249 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 156:
/* rule 156 can match eol */
YY_RULE_SETUP
#line 251 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 252 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 253 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 255 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 258 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3229 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1120 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1120 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1119);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 258 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

